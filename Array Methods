//bubble sort
function sort(_arr, callback = (a, b) => a > b) {
  array_error(_arr);
  for (let i = 0; i < _arr.length - 1; i++) {
    for (let j = 0; j < _arr.length - i - 1; j++) {
      if (callback(_arr[j], _arr[j + 1])) {
        let temp = _arr[j];
        _arr[j] = _arr[j + 1];
        _arr[j + 1] = temp;
      }
    }
  }
  return _arr;
}

//indexOf
function indexOf(arr, value) {
  array_error(_arr);
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === value) {
      return i;
    }
  }
}

//lastIndexOf
function lastIndexOf(arr, value) {
  array_error(arr);
  for (let i = arr.length - 1; i >= 0; i--) {
    if (arr[i] === value) {
      return i;
    }
  }
}

//max
function max(arr) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > arr[0]) {
      arr[0] = arr[i];
    }
  }
  return arr[0];
}

//min
function min(arr) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < arr[0]) {
      arr[0] = arr[i];
    }
  }
}

//avj
function avj(arr, callback = (x) => x) {
  array_error(arr);
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }
  return callback(sum / arr.length);
}

//shift
function shift(arr) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    arr[i] = arr[i + 1];
  }
  arr.length = arr.length - 1;
  return arr[0];
}

//unshift
function unshift(arr, value) {
  array_error(arr);

  for (let i = arr.length; i >= 0; i--) {
    arr[i + 1] = arr[i];
  }
  arr.length = arr.length - 1;
  arr[0] = value;
  return arr.length;
}

//flatten
function flatten(arr) {
  array_error(arr);
  let flat = [];
  for (let i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      flat = flat.concat(flatten(arr[i]));
    } else {
      flat.push(arr[i]);
    }
  }
  return flat;
}

//splice
function splice(arr, start, deleteCount, ...items) {
  array_error(_arr);
  return concat(
    slice(arr, start + deleteCount),
    concat(slice(arr, 0, start), items)
  );
}

//slice
function slice(_arr, start, end) {
  array_error(_arr);
  let temparr = [];
  for (let i = 0; i < _arr.length; i++) {
    if (i >= start && i < end) {
      push(temparr, _arr[i]);
    }
  }

  return temparr;
}

//push
function push(arr, value) {
  array_error(arr);
  arr[arr.length] = value;
  return arr;
}

//concat
function concat(arr1, arr2) {
  array_error(arr1);
  array_error(arr2);
  let temparr = [];
  for (let i = 0; i < arr1.length; i++) {
    push(temparr, arr1[i]);
  }
  for (let i = 0; i < arr2.length; i++) {
    push(temparr, arr2[i]);
  }
  return temparr;
}

//includes
function includes(arr, value) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === value) {
      return true;
    }
  }
  return false;
}

//pop
function pop(arr) {
  array_error(arr);
  let lastindex = arr[arr.length - 1];
  arr.length = arr.length - 1;
  return lastindex;
}

//fill
function fill(arr, value, fstIndex = 0, lstIndex) {
  array_error(arr);
  lstIndex ?? arr.length;
  for (let i = fstIndex; i < lstIndex; i++) {
    arr[i] = value;
  }
  return arr;
}

//filter
function filter(arr, callback) {
  array_error(arr);
  let temparr = [];
  for (let i = 0; i < arr.length; i++) {
    callback(arr[i]) && push(temparr, arr[i]);
  }
  return temparr;
}

//find
function find(arr, callback) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    if (callback(arr[i])) {
      return arr[i];
    }
  }
}

//findIndex
function findIndex(arr, callback) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    if (callback(arr[i])) {
      return i;
    }
  }
  return -1;
}

//map
function map(arr, callback) {
  array_error(arr);
  let temparr = [];
  for (let i = 0; i < arr.length; i++) {
    push(temparr, callback(arr[i]));
  }
  return temparr;
}

//reduce
function reduce(arr, callback, accumulator) {
  array_error(arr);
  accumulator ?? arr[0];
  for (let i = 0; i < arr.length; i++) {
    accumulator = callback(accumulator, arr[i]);
  }
  return accumulator;
}

//some
function some(arr, callback) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    if (callback(arr[i])) {
      return true;
    }
  }
  return false;
}
//every
function every(arr, callback) {
  array_error(arr);
  for (let i = 0; i < arr.length; i++) {
    if (!callback(arr[i])) {
      return false;
    }
  }
  return true;
}

//equal
function equal(arr1, arr2) {
  array_error(arr1);
  array_error(arr2);
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) {
      return false;
    }
  }
  return true;
}

//intersection
function intersection(arr1, arr2) {
  let temparr = [];
  array_error(arr1);
  array_error(arr2);
  for (let i = 0; i < arr1.length; i++) {
    for (let j = 0; j < arr2.length; j++) {
      if (arr1[i] === arr2[j] && !includes(temparr, arr1[i])) {
        push(temparr, arr1[i]);
      }
    }
  }
  return temparr;
}

//union
function union(arr1, arr2) {
  let temparr = [];
  array_error(arr1);
  array_error(arr2);
  for (let i = 0; i < arr1.length; i++) {
    push(temparr, arr1[i]);
  }
  for (let i = 0; i < arr2.length; i++) {
    if (!includes(temparr, arr2[i])) {
      push(temparr, arr2[i]);
    }
  }
  return temparr;
}

//exclusive
function exclusive(arr1, arr2) {
  array_error(arr1);
  array_error(arr2);
  for (let i = 0; i < arr1.length; i++) {
    for (let j = 0; j < arr2.length; j++) {
      if (includes(arr1, arr2[i])) {
        return false;
      }
    }
  }
  return true;
}

function array_error(arr) {
  if (Object.prototype.toString.call(arr) !== "[object Array]") {
    throw new Error("Value must be an array");
  }
}

module.exports = {
  sort: sort,
  indexOf: indexOf,
  lastIndexOf: lastIndexOf,
  includes: includes,
  shift: shift,
  unshift: unshift,
  splice: splice,
  slice: slice,
  push: push,
  fill: fill,
  map: map,
  filter: filter,
  find: find,
  findIndex: findIndex,
  pop: pop,
  concat: concat,
  reduce: reduce,
  some: some,
  every: every,
  max: max,
  min: min,
  avj: avj,
  flatten: flatten,
  equal: equal,
  intersection: intersection,
  union: union,
  exclusive: exclusive,
};
